//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB)
// Reference Implementation, v2.2.4
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source
// schema.
// Generated on: 2011.08.25 at 08:55:07 AM CEST
//

package fr.ign.cogit.geoxygene.sig3d.model.citygml.core;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

import fr.ign.cogit.geoxygene.spatial.geomprim.GM_Point;
import fr.ign.cogit.geoxygene.spatial.geomroot.GM_Object;

/**
 * Type for the implicit representation of a geometry. An implicit geometry is a
 * geometric object, where the shape is stored only once as a prototypical
 * geometry, e.g. a tree or other vegetation object, a traffic light or a
 * traffic sign. This prototypic geometry object is re-used or referenced many
 * times, wherever the corresponding feature occurs in the 3D city model. Each
 * occurrence is represented by a link to the prototypic shape geometry (in a
 * local cartesian coordinate system), by a transforma-tion matrix that is
 * multiplied with each 3D coordinate tuple of the prototype, and by an anchor
 * point denoting the base point of the object in the world coordinate reference
 * system. In order to determine the absolute coordinates of an implicit
 * geometry, the anchor point coordinates have to be added to the matrix
 * multiplication results. The transformation matrix accounts for the intended
 * rotation, scaling, and local translation of the prototype. It is a 4x4 matrix
 * that is multiplied with the prototype coordinates using homogeneous
 * coordinates, i.e. (x,y,z,1). This way even a projection might be modelled by
 * the transformation matrix. The concept of implicit geometries is an
 * enhancement of the geometry model of GML3.
 * 
 * <p>
 * Java class for ImplicitGeometryType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="ImplicitGeometryType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.opengis.net/gml}AbstractGMLType">
 *       &lt;sequence>
 *         &lt;element name="mimeType" type="{http://www.opengis.net/citygml/1.0}MimeTypeType" minOccurs="0"/>
 *         &lt;element name="transformationMatrix" type="{http://www.opengis.net/citygml/1.0}TransformationMatrix4x4Type" minOccurs="0"/>
 *         &lt;element name="libraryObject" type="{http://www.w3.org/2001/XMLSchema}anyURI" minOccurs="0"/>
 *         &lt;element name="relativeGMLGeometry" type="{http://www.opengis.net/gml}GM_Object" minOccurs="0"/>
 *         &lt;element name="referencePoint" type="{http://www.opengis.net/gml}GM_Point"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ImplicitGeometryType", propOrder = { "mimeType",
    "transformationMatrix", "libraryObject", "relativeGMLGeometry",
    "referencePoint" })
public class CG_ImplicitGeometry

{

  protected String mimeType;
  @XmlList
  @XmlElement(type = Double.class)
  protected List<Double> transformationMatrix;
  @XmlSchemaType(name = "anyURI")
  protected String libraryObject;
  protected GM_Object relativeGMLGeometry;
  @XmlElement(required = true)
  protected GM_Point referencePoint;

  /**
   * Gets the value of the mimeType property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getMimeType() {
    return this.mimeType;
  }

  /**
   * Sets the value of the mimeType property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setMimeType(String value) {
    this.mimeType = value;
  }

  public boolean isSetMimeType() {
    return (this.mimeType != null);
  }

  /**
   * Gets the value of the transformationMatrix property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot.
   * Therefore any modification you make to the returned list will be present
   * inside the JAXB object. This is why there is not a <CODE>set</CODE> method
   * for the transformationMatrix property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
   * getTransformationMatrix().add(newItem);
   * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link Double }
   * 
   * 
   */
  public List<Double> getTransformationMatrix() {
    if (this.transformationMatrix == null) {
      this.transformationMatrix = new ArrayList<Double>();
    }
    return this.transformationMatrix;
  }

  public boolean isSetTransformationMatrix() {
    return ((this.transformationMatrix != null) && (!this.transformationMatrix
        .isEmpty()));
  }

  public void unsetTransformationMatrix() {
    this.transformationMatrix = null;
  }

  /**
   * Gets the value of the libraryObject property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLibraryObject() {
    return this.libraryObject;
  }

  /**
   * Sets the value of the libraryObject property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setLibraryObject(String value) {
    this.libraryObject = value;
  }

  public boolean isSetLibraryObject() {
    return (this.libraryObject != null);
  }

  /**
   * Gets the value of the relativeGMLGeometry property.
   * 
   * @return possible object is {@link GM_Object }
   * 
   */
  public GM_Object getRelativeGMLGeometry() {
    return this.relativeGMLGeometry;
  }

  /**
   * Sets the value of the relativeGMLGeometry property.
   * 
   * @param value allowed object is {@link GM_Object }
   * 
   */
  public void setRelativeGMLGeometry(GM_Object value) {
    this.relativeGMLGeometry = value;
  }

  public boolean isSetRelativeGMLGeometry() {
    return (this.relativeGMLGeometry != null);
  }

  /**
   * Gets the value of the referencePoint property.
   * 
   * @return possible object is {@link GM_Point }
   * 
   */
  public GM_Point getReferencePoint() {
    return this.referencePoint;
  }

  /**
   * Sets the value of the referencePoint property.
   * 
   * @param value allowed object is {@link GM_Point }
   * 
   */
  public void setReferencePoint(GM_Point value) {
    this.referencePoint = value;
  }

  public boolean isSetReferencePoint() {
    return (this.referencePoint != null);
  }

}
